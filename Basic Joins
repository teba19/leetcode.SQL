 1 -- replace employee id with the unique identifier

select EmployeeUNI.unique_id , Employees.name 
from Employees 
left join EmployeeUNI on Employees.id = EmployeeUNI.id


2 -- customer who visited but didnot make any transactions

SELECT Visits.customer_id, COUNT(Visits.visit_id) AS count_no_trans
FROM Visits 
LEFT JOIN Transactions  ON Visits.visit_id = Transactions.visit_id
WHERE Transactions.transaction_id IS NULL
GROUP BY Visits.customer_id;

3 -- rising-temperature
SELECT w1.id
FROM Weather w1
JOIN Weather w2 
  ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

4 -- average time of process per machine
SELECT a1.machine_id, ROUND(AVG(a2.timestamp - a1.timestamp), 3) AS processing_time
FROM Activity a1
JOIN Activity a2
  ON a1.machine_id = a2.machine_id
  AND a1.process_id = a2.process_id
  AND a1.activity_type = 'start'
  AND a2.activity_type = 'end'
GROUP BY a1.machine_id;


5-- employee bonus

SELECT Employee.name , Bonus.bonus
FROM Employee
LEFT JOIN Bonus ON Employee.empid = Bonus.empid
WHERE bonus < 1000 OR bonus IS NULL ;

6 -- Students and examinations
select st.student_id, st.student_name, sb.subject_name, count(e.subject_name) as attended_exams
from Students st
join Subjects sb
left join examinations e 
on e.student_id = st.student_id
and e.subject_name = sb.subject_name
group by st.student_id, sb.subject_name
order by st.student_id

7 -- Managers with at least 5 direct reports
SELECT e1.name
FROM Employee e1
JOIN Employee e2
ON e1.id = e2.managerId
GROUP BY e1.id,e1.name
HAVING COUNT(e1.id) >= 5;

8 -- Confirmation rate
SELECT s.user_id , ROUND(AVG(IF(c.action="confirmed",1,0)),2) AS confirmation_rate
FROM Signups s
LEFT JOIN Confirmations c
ON s.user_id = c.user_id
GROUP BY s.user_id;
